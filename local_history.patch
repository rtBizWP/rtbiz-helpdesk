Index: app/admin/class-rt-hd-import-operation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/admin/class-rt-hd-import-operation.php	(revision )
+++ app/admin/class-rt-hd-import-operation.php	(revision )
@@ -54,7 +54,7 @@
 
 			add_action( 'comment_post', array( $this, 'mail_new_comment_data' ), 10, 2 );
 
-			add_action( 'wp_ajax_rthd_update_followup_ajax', array( $this, 'update_followup_ajax' ) );
+			add_action( 'wp_ajax_rthd_add_new_followup_ajax', array( $this, 'add_new_followup_ajax' ) );
 			add_action( 'wp_ajax_rthd_add_new_followup_front', array( $this, 'add_new_followup_front' ) );
 			add_action( 'wp_ajax_nopriv_rthd_add_new_followup_front', array( $this, 'add_new_followup_front' ) );
 			add_action( 'wp_ajax_helpdesk_delete_followup', array( $this, 'delete_followup_ajax' ) );
@@ -70,20 +70,20 @@
 		}
 
 		function ticket_bulk_edit() {
-
+			
 			$post_ids = ( isset( $_POST[ 'post_ids' ] ) && ! empty( $_POST[ 'post_ids' ] ) ) ? $_POST[ 'post_ids' ] : array();
 			$status = ( isset( $_POST[ 'ticket_status' ] ) && ! empty( $_POST[ 'ticket_status' ] ) ) ? $_POST[ 'ticket_status' ] : NULL;
-
+			
 			if ( ! empty( $post_ids ) && is_array( $post_ids ) ) {
 				global $rt_hd_module, $rt_hd_email_notification, $rt_hd_ticket_history_model;
-
+				
 				$labels = $rt_hd_module->labels;
 				$flag = false;
-
+				 
 				foreach( $post_ids as $post_id ) {
-
+					
 					$diff_body = '<table style="width:100%;border-collapse:collapse;border:none">';
-
+					
 					if ( ! empty( $status ) ) {
 						// Status Diff
 						$post_statuses = $rt_hd_module->get_custom_statuses();
@@ -113,30 +113,30 @@
 						}
 						$flag = true;
 					}
-
+					
 					if ( isset( $_POST['tax_input'] ) && ! empty( $_POST['tax_input'] ) ) {
-
+						
 						foreach ( $_POST['tax_input'] as $tax_slug => $tax_ids ) {
 							$diff = rthd_get_taxonomy_diff( $post_id, $tax_slug );
-
+							
 							$tax_info = get_taxonomy( $tax_slug );
-
+							
 							if ( $diff != '' ) {
 								$diff_body .= '<tr><th style="padding: .5em;border: 0;">'.$tax_info->labels->name.'</th><td>' . $diff . '</td><td></td></tr>';
 								$flag = true;
 							}
 						}
 					}
-
+					
 					$diff_body .= '</table>';
-
+					
 					if( $flag ) {
 						$rt_hd_email_notification->notification_ticket_updated( $post_id, $labels['name'], $diff_body, array() );
 					}
 				}
 			}
 		}
-
+		
 		function add_new_ticket_ajax(){
 			$result = array();
 
@@ -279,7 +279,7 @@
 			if ( $references != '' ) {
 				update_post_meta( $post_id, '_rtbiz_hd_references', $references );
 			}
-
+			
 			// Call action to add product info into ticket meta data.
 			do_action( 'rt_hd_add_ticket_offering_info', $post_id );
 
@@ -479,8 +479,8 @@
 			$originalBody = ''
 		) {
 			$redux = rthd_get_redux_settings();
-
-			//Exclude mailbox email form all emails
+			$is_black_list_empty = true;
+			$black_list_emails = rthd_get_blacklist_emails();
 			$contactEmail = array();
 			if( !empty( $allemail ) && is_array( $allemail ) ){
 				foreach( $allemail as $email  ){
@@ -489,10 +489,9 @@
 					}
 				}
 			}
-			$allemails = $contactEmail;
 
-			$black_list_emails = rthd_get_blacklist_emails();
 			if ( ! empty( $black_list_emails ) ){
+				$is_black_list_empty = false;
 				foreach ( $black_list_emails as $email ){
 					if ( preg_match( '/'.str_replace('*','\/*',$email).'/', $fromemail['address'] ) ){
 						return false;
@@ -510,7 +509,7 @@
 			$allemail = array();
 			foreach ( $allemails as $mail ) {
 				if ( ! array_key_exists( $mail['address'], $hdUser ) ) {
-					if ( ! empty( $black_list_emails ) ){
+					if ( ! $is_black_list_empty ){
 						foreach ( $black_list_emails as $email ){
 							if ( ! preg_match( '/'.str_replace('*','\/*',$email).'/',  $mail['address'] ) ){
 								$allemail[]= $mail;
@@ -531,7 +530,7 @@
 			}
 			//always true in mail cron  is use for importer
 			if ( ! $check_duplicate ) {
-				$success_flag = $this->insert_new_ticket( $title, $body, $mailtime, $allemail, $uploaded, $fromemail['address'], '', '', '', $subscriber );
+				$success_flag = $this->insert_new_ticket( $title, $body, $mailtime, $allemail, $uploaded, $fromemail['address'] );
 
 				error_log( 'Mail Parse Status : ' . var_export( $success_flag, true ) . "\n\r" );
 
@@ -577,12 +576,12 @@
 			error_log( "POST ID : ". var_export( $postid, true ) . "\r\n" );
 			$dndEmails = array();
 
-			if ( $postid && get_post( $postid ) != null ) { // if post id found from title or mail meta & mail is Re: or Fwd:
+			if ( $postid && get_post( $postid ) != null ) {
 				if ( $forwardFlag ) {
 					$this->process_forward_email_data( $title, $body, $mailtime, $allemail, $mailBodyText, $dndEmails );
 				}
 
-				$success_flag = $this->insert_post_comment( $postid, $userid, $body, $fromemail['name'], $fromemail['address'], $mailtime, $uploaded, $allemail, $dndEmails, $messageid, $inreplyto, $references, $subscriber, $originalBody);
+				$success_flag = $this->insert_post_comment( $postid, $userid, $body, $fromemail['name'], $fromemail['address'], $mailtime, $uploaded, $contactEmail, $dndEmails, $messageid, $inreplyto, $references, $allemail , $subscriber, $originalBody);
 
 				error_log( 'Mail Parse Status : ' . var_export( $success_flag, true ) . "\n\r" );
 
@@ -590,20 +589,18 @@
 					foreach ( $uploaded as $u ) {
 						unlink( $u['file'] );
 					}
-				} else if ( is_numeric( $success_flag ) ) {
-					$success_flag = true;
 				}
 
 				return $success_flag;
 			}
 			//if subject is re to post title
 
-			if ( $replyFlag ) { // if post id not found from title or mail meta & mail is Re: or Fwd:
+			if ( $replyFlag ) {
 				error_log("MAIL IS A REPLY / FORWARD OF PREVIOUS TICKET\n\r");
 				$title       = str_replace( 'Re:', '', $title );
 				$title       = str_replace( 're:', '', $title );
 				$title       = trim( $title );
-				$existPostId = $this->post_exists( $title ); //found title in post
+				$existPostId = $this->post_exists( $title );
 				if ( ! isset( $fromemail['name'] ) ) {
 					$fromemail['name'] = $fromemail['address'];
 				}
@@ -616,8 +613,6 @@
 						foreach ( $uploaded as $u ) {
 							unlink( $u['file'] );
 						}
-					} else if ( is_numeric( $success_flag ) ) {
-						$success_flag = true;
 					}
 					return $success_flag;
 				} else {
@@ -631,7 +626,7 @@
 					}
 					return $success_flag;
 				}
-			} else { // if post id not found from title or mail meta & mail is not Re: or Fwd:
+			} else {
 				$existPostId = $this->post_exists( $title, $mailtime );
 				//if given post title exits then it will be add as comment other wise as post
 				error_log( "Post Exists : ". var_export( $existPostId, true ) . "\r\n" );
@@ -653,8 +648,6 @@
 						foreach ( $uploaded as $u ) {
 							unlink( $u['file'] );
 						}
-					} else if ( is_numeric( $success_flag ) ) {
-						$success_flag = true;
 					}
 					return $success_flag;
 				}
@@ -805,28 +798,25 @@
 		/**
 		 * Add comment to post
 		 *
-		 * @param 			$comment_post_ID
+		 * @param        $comment_post_ID
-		 * @param 			$userid
+		 * @param        $userid
-		 * @param 			$comment_content
+		 * @param        $comment_content
-		 * @param 			$comment_author
+		 * @param        $comment_author
-		 * @param 			$comment_author_email
+		 * @param        $comment_author_email
-		 * @param 			$commenttime
+		 * @param        $commenttime
-		 * @param 			$uploaded
+		 * @param        $uploaded
-		 * @param array 	$allemails : All contact
+		 * @param        $allemails
-		 * @param 			$dndEmails
+		 * @param        $dndEmails
-		 * @param string 	$messageid
+		 * @param string $messageid
-		 * @param string 	$inreplyto
+		 * @param string $inreplyto
-		 * @param string 	$references
+		 * @param string $references
-		 * @param array 	$subscriber : All staff
-		 * @param string 	$originalBody
-		 * @param string 	$comment_type
-		 * @param int 		$comment_parent
+		 * @param array  $subscriber
 		 *
 		 * @return bool
 		 *
 		 * @since rt-Helpdesk 0.1
 		 */
-		public function insert_post_comment( $comment_post_ID, $userid, $comment_content, $comment_author, $comment_author_email, $commenttime, $uploaded, $allemails = array(), $dndEmails, $messageid = '', $inreplyto = '', $references = '', $subscriber = array(), $originalBody = '', $comment_type = '10', $comment_parent = 0, $keep_status = false ) {
+		public function insert_post_comment( $comment_post_ID, $userid, $comment_content, $comment_author, $comment_author_email, $commenttime, $uploaded, $contactEmails, $dndEmails, $messageid = '', $inreplyto = '', $references = '', $allemails = array(), $subscriber = array(), $originalBody = '' ) {
 
 			$post_type       = get_post_type( $comment_post_ID );
 			$ticketModel     = new Rt_HD_Ticket_Model();
@@ -839,22 +829,17 @@
 			global $signature;
 			$comment_content_old = $comment_content;
 			$comment_content     = str_replace( $signature, '', $comment_content );
-			$comment_author_ip = preg_replace( '/[^0-9a-fA-F:., ]/', '', $_SERVER['REMOTE_ADDR'] );
-			$comment_author_ip = empty( $comment_author_ip ) ? ' ' : $comment_author_ip;
-			$comment_agent = substr( $_SERVER['HTTP_USER_AGENT'], 0, 254 );
-			$comment_agent = empty( $comment_agent ) ? ' ' : $comment_author;
-
 			$data                = array(
 				'comment_post_ID'      => $comment_post_ID,
 				'comment_author'       => $comment_author,
 				'comment_author_email' => $comment_author_email,
 				'comment_author_url'   => 'http://',
 				'comment_content'      => $comment_content,
-				'comment_type'         => $comment_type,
-				'comment_parent'       => $comment_parent,
+				'comment_type'         => '10',
+				'comment_parent'       => 0,
 				'user_id'              => $userid,
-				'comment_author_IP'    => $comment_author_ip,
-				'comment_agent'        => $comment_agent,
+				'comment_author_IP'    => '127.0.0.1',
+				'comment_agent'        => ' ',
 				'comment_date'         => $commentDate,
 				'comment_date_gmt'     => $commentDateGmt,
 				'comment_approved'     => 1,
@@ -908,16 +893,12 @@
 			$post = get_post( $comment_post_ID );
 
 			if ( $rt_hd_email_notification->is_internal_user( $comment_author_email ) ) {
-				if ( $keep_status ){
-					if ( $post->post_status != 'hd-unanswered' ){
-						wp_update_post( array( 'ID'=>$comment_post_ID ,'post_status'=>'hd-unanswered') );
-					}
-				}else{
+
-					if ( $post->post_status != 'hd-answered' ){
-						wp_update_post( array( 'ID'=>$comment_post_ID ,'post_status'=>'hd-answered') );
-					}
-				}
+				if ( $post->post_status != 'hd-answered' ){
+					wp_update_post( array( 'ID'=>$comment_post_ID ,'post_status'=>'hd-answered') );
+				}
+			}
-			} else {
+			else {
 				if ( $post->post_status != 'hd-unanswered' ){
 					wp_update_post( array( 'ID'=>$comment_post_ID ,'post_status'=>'hd-unanswered') );
 				}
@@ -945,15 +926,15 @@
 
 			$this->add_attachment_to_post( $uploaded, $comment_post_ID, $comment_id );
 
-			$this->add_contacts_to_post( $allemails, $comment_post_ID );
+			$this->add_contacts_to_post( $contactEmails, $comment_post_ID );
 
 			global $threadPostId;
 			if ( ! isset( $threadPostId ) ) {
 				global $rt_hd_email_notification;
-				$rt_hd_email_notification->notification_new_followup_added( get_comment( $comment_id ), $comment_type, $uploaded );
+				$rt_hd_email_notification->notification_new_followup_added( get_comment( $comment_id ), '10', $uploaded );
 			}
 
-			return $comment_id;
+			return true;
 		}
 
 		/**
@@ -1198,122 +1179,166 @@
 		 *
 		 * @since rt-Helpdesk 0.1
 		 */
-		function add_new_followup_front(){
+		function add_new_followup_front() {
+			global $rt_hd_email_notification;
+			if ( ! isset( $_POST['followuptype'] ) ) {
+				wp_die( 'Invalid Request' );
+			}
+			if ( ! isset( $_POST['followup_ticket_unique_id'] ) ) {
+				wp_die( 'Invalid Ticket' );
+			}
 			$returnArray     = array();
-			$returnArray['status']  = false;
-
 			if ( ! is_user_logged_in() ){
+				$returnArray['status']  = false;
 				$returnArray['message'] = 'ERROR: please login to continue.';
 				echo json_encode( $returnArray );
 				die( 0 );
 			}
-
-			if ( ! isset( $_POST['followup_content'] ) || empty( $_POST['followup_content'] ) ) {
-				$returnArray['status']  = false;
-				$returnArray['message'] = 'ERROR: please type a comment.';
-				echo json_encode( $returnArray );
-				die( 0 );
+			$ticket_unique_id = $_POST['followup_ticket_unique_id'];
+			$args             = array(
+				'meta_key'    => '_rtbiz_hd_unique_id',
+				'meta_value'  => $ticket_unique_id,
+				'post_status' => 'any',
+				'post_type'   => Rt_HD_Module::$post_type,
+			);
+			$ticketpost       = get_posts( $args );
+			if ( empty( $ticketpost ) ) {
+				wp_die( 'Invalid Ticket' );
 			}
+			$rthd_ticket = $ticketpost[0];
 
-			if ( ! isset( $_POST['private_comment'] ) ) {
-				$returnArray['message'] = 'ERROR: Invalid Request';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-			if ( ! isset( $_POST['followup_ticket_unique_id'] ) ) {
-				$returnArray['message'] = 'ERROR: Invalid Ticket.';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-
-			$rthd_ticket = $this->get_ticket_from_ticket_unique_id( $_POST['followup_ticket_unique_id'] );
+			$followuptype    = $_POST['followuptype'];
 			$comment_post_ID = $rthd_ticket->ID;
-			$comment_content = rthd_content_filter( $_POST['followup_content'] );
+			$post_type       = $rthd_ticket->post_type;
 
+			$comment_content = rthd_content_filter( $_POST['followup_content'] );
+			$comment_privacy = $_POST['private_comment'];
+			global $wpdb;
 			$user = wp_get_current_user();
 			if ( $user->exists() ) {
-				$userid              = $user->ID;
+				$user_id              = $user->ID;
 				$comment_author       = esc_sql( $user->display_name );
 				$comment_author_email = esc_sql( $user->user_email );
+				$comment_author_url   = esc_sql( $user->user_url );
 			}
+			if ( '' == $comment_content ) {
+				$returnArray['status']  = false;
+				$returnArray['message'] = 'ERROR: please type a comment.';
+				echo json_encode( $returnArray );
+				die( 0 );
+			}
 
-			$comment_type                   = $_POST['private_comment'];
-			$comment_parent                 = 0;
-
+			$comment_type                   = $followuptype;
+			$comment_parent                 = 0; //absint($_POST['comment_ID']);
+			$comment_auto_approved          = true;
+			$commentdata                    = compact( 'comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_id' );
+			$commentdata                    = apply_filters( 'preprocess_comment', $commentdata );
+			$commentdata['comment_post_ID'] = (int) $commentdata['comment_post_ID'];
+			if ( isset( $commentdata['user_ID'] ) ) {
+				$commentdata['user_id'] = $commentdata['user_ID'] = (int) $commentdata['user_ID'];
+			} elseif ( isset( $commentdata['user_id'] ) ) {
+				$commentdata['user_id'] = (int) $commentdata['user_id'];
+			}
+			$commentdata['comment_parent']    = isset( $commentdata['comment_parent'] ) ? absint( $commentdata['comment_parent'] ) : 0;
+			$parent_status                    = ( 0 < $commentdata['comment_parent'] ) ? wp_get_comment_status( $commentdata['comment_parent'] ) : '';
+			$commentdata['comment_parent']    = ( 'approved' == $parent_status || 'unapproved' == $parent_status ) ? $commentdata['comment_parent'] : 0;
+			$commentdata['comment_author_IP'] = preg_replace( '/[^0-9a-fA-F:., ]/', '', $_SERVER['REMOTE_ADDR'] );
+			$commentdata['comment_agent']     = substr( $_SERVER['HTTP_USER_AGENT'], 0, 254 );
 			if ( isset( $_REQUEST['follwoup-time'] ) && $_REQUEST['follwoup-time'] != '' ) {
 				$d                           = new DateTime( $_REQUEST['follwoup-time'] );
-				$commenttime = $d->format( 'Y-m-d H:i:s' );
-				//$commentdata['comment_date_gmt'] = $d->format( 'Y-m-d H:i:s' );
+				$commentdata['comment_date'] = $d->format( 'Y-m-d H:i:s' );
+				$commentdata['comment_date_gmt'] = $d->format( 'Y-m-d H:i:s' );
 			} else {
-				$commenttime     = current_time( 'mysql' );
-				//$commentdata['comment_date_gmt'] = current_time( 'mysql', 1 );
+				$commentdata['comment_date']     = current_time( 'mysql' );
+				$commentdata['comment_date_gmt'] = current_time( 'mysql', 1 );
 			}
+			$commentdata['comment_approved'] = 1;
+            $commentdata['comment_type']=$comment_privacy;
+			$comment_ID                      = wp_insert_comment( $commentdata );
 
-			if ( $_FILES ) {
-				$attachment = $_FILES['attachemntlist'];
-				foreach ( $attachment['name'] as $key => $value ) {
-					if ( $attachment['name'][ $key ] ) {
+//			update_comment_meta( $comment_ID, '_rthd_privacy', $comment_privacy );
+
+			$comment    = get_comment( $comment_ID );
+			$attachment = array();
+			$uploaded   = array();
+
+			//then loop over the files that were sent and store them using  media_handle_upload();
+			//			var_dump($_FILES);
+			$attachment_IDs=array();
+            if ( ! empty($_FILES['attachemntlist']['name'])) {
+                $files = $_FILES['attachemntlist'];
+                foreach ($files['name'] as $key => $value) {
+                    if ($files['name'][$key]) {
-						$file = array(
+                        $file = array(
-							'name'     => $attachment['name'][ $key ],
-							'type'     => $attachment['type'][ $key ],
-							'tmp_name' => $attachment['tmp_name'][ $key ],
-							'error'    => $attachment['error'][ $key ],
-							'size'     => $attachment['size'][ $key ],
+                            'name' => $files['name'][$key],
+                            'type' => $files['type'][$key],
+                            'tmp_name' => $files['tmp_name'][$key],
+                            'error' => $files['error'][$key],
+                            'size' => $files['size'][$key]
-						);
+                        );
-						$uploaded[] = self::insert_attachment( $file );
+                        $_FILES = array("attachemntlist" => $file);
+                        foreach ($_FILES as $file => $array) {
+                            $attach_id = $this->process_file_attachment($file);
+                            array_push($attachment_IDs, $attach_id);
-					}
-				}
-			}
+                        }
+                    }
+                }
-
-			$uploaded = array_filter( $uploaded );
-
-			$allemail = array();
-			$dndEmails = array();
-			$subscriber = array();
-
-			$rtCampUser = Rt_HD_Utils::get_hd_rtcamp_user();
-			$hdUser     = array();
-			foreach ( $rtCampUser as $rUser ) {
-				$hdUser[ $rUser->user_email ] = $rUser->ID;
-			}
+            }
-			if ( ! array_key_exists( $comment_author_email, $hdUser ) ) {
-				if ( ! empty( $black_list_emails ) ){
-					foreach ( $black_list_emails as $email ){
-						if ( ! preg_match( '/'.str_replace('*','\/*',$email).'/',  $comment_author_email ) ){
-							$allemail[]= array( 'address' => $comment_author_email, 'name' => $comment_author, 'key' => 'to', );
-						}else{
-							$returnArray['message'] = 'ERROR: You are blacklisted fot this system';
-							echo json_encode( $returnArray );
-							die( 0 );
+            if ( isset( $attachment_IDs ) && ! empty( $attachment_IDs ) ) {
+				foreach ( $attachment_IDs as $strAttach ) {
+					$attachfile = get_attached_file( intval( $strAttach ) );
+					if ( $attachfile ) {
+						$attachment[] = wp_get_attachment_url( intval( $strAttach ) );
+						$extn_array = explode( '.', $attachfile );
+						$extn       = $extn_array[ count( $extn_array ) - 1 ];
+						$file_array = explode( '/', $attachfile );
+						$fileName   = $file_array[ count( $file_array ) - 1 ];
+						$uploaded[] = array(
+							'filename'      => $fileName,
+							'extn'          => $extn,
+							'url'           => wp_get_attachment_url( intval( $strAttach ) ),
+							'file'          => $attachfile,
+						);
-						}
-					}
+					}
+				}
-				}else{
-					$allemail[]= array( 'address' => $comment_author_email, 'name' => $comment_author, 'key' => 'to', );
+
+				$this->add_attachment_to_post( $uploaded, $comment_post_ID, $comment_ID );
-				}
+			}
-			} else {
-				$subscriber[]= $comment_author_email;
+            /*
+             *This code is for issue Issue #43
+             * Toggle Ticket Status
+             *
+             */
+            if ( isset($_POST['rthd_keep_status']) && !empty($_POST['rthd_keep_status'])){
+                if ($_POST['rthd_keep_status']=='false'){
+                    $returnArray['ticket_status']= rthd_toggle_status($comment_post_ID);
-			}
+                }
-
-			$keep_status = false;
-			if ( isset($_POST['rthd_keep_status']) && !empty($_POST['rthd_keep_status']) && $_POST['rthd_keep_status'] == 'true'){
-				$keep_status = true;
-			}
+            }
+            else{
+                $returnArray['ticket_status']= rthd_toggle_status($comment_post_ID);
+            }
+            /* end of status toogle code */
 
-			$comment_ID = $this->insert_post_comment( $comment_post_ID, $userid, $comment_content, $comment_author, $comment_author_email, $commenttime, $uploaded, $allemail, $dndEmails, '', '', '', $subscriber, '', $comment_type, $comment_parent, $keep_status);
+			$currentUser = get_user_by( 'id', get_current_user_id() );
 
+			if ( ! empty( $currentUser->user_email ) ) {
+				update_comment_meta( $comment_ID, '_email_from', $currentUser->user_email );
+			}
+			// sending notification for followup added
+			$rt_hd_email_notification->notification_new_followup_added( $comment, $comment_privacy, $uploaded );
+
-			$returnArray['status'] = true;
+			$returnArray['status']        = true;
 
 			$returnArray['comment_count'] = get_comments(
 				array(
 					'order'     => 'DESC',
 					'post_id'   => $comment_post_ID,
-					'post_type' => $rthd_ticket->post_type,
+					'post_type' => $post_type,
 					'count'     => true,
 				) );
-
 			$returnArray['comment_id'] = $comment_ID;
-			$returnArray['private']       = $comment_type;
-			$comment_user  = get_user_by( 'id', $userid );
+			$returnArray['private']       = $comment_privacy;
+			$comment_user  = get_user_by( 'id', $comment->user_id );
 			$comment_render_type = 'left';
 			$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
 			if ( ! empty( $comment_user ) ) {
@@ -1321,30 +1346,13 @@
 					$comment_render_type = 'right';
 				}
 			}
-			$user_edit = current_user_can( $cap ) || ( get_current_user_id() == $userid );
+			$user_edit = current_user_can( $cap ) || ( get_current_user_id() == $comment->user_id );
 			$returnArray['comment_content'] = rthd_render_comment( get_comment( $comment_ID ), $user_edit, $comment_render_type, false );
 			echo json_encode( $returnArray );
 			ob_end_flush();
 			die( 0 );
 		}
 
-		function get_ticket_from_ticket_unique_id( $ticket_unique_id ){
-			$args             = array(
-				'meta_key'    => '_rtbiz_hd_unique_id',
-				'meta_value'  => $ticket_unique_id,
-				'post_status' => 'any',
-				'post_type'   => Rt_HD_Module::$post_type,
-			);
-			$ticketpost       = get_posts( $args );
-			if ( empty( $ticketpost ) ) {
-				return false;
-			}
-			if ( is_array( $ticketpost ) ){
-				$ticketpost = $ticketpost[0];
-			}
-			return $ticketpost;
-		}
-
 		/**
 		 * add new followup on AJAX
 		 *
@@ -1352,115 +1360,270 @@
 		 *
 		 * @since rt-Helpdesk 0.1
 		 */
-		function update_followup_ajax() {
+		function add_new_followup_ajax() {
 			global $rt_hd_email_notification;
 
+			if ( ! isset( $_POST['followuptype'] ) ) {
+				wp_die( 'Invalid Request' );
+			}
+			if ( ! ( isset( $_POST['followup_post_id'] ) && get_post_type( intval( $_POST['followup_post_id'] ) ) == $_POST['post_type'] ) ) {
+				wp_die( 'Invalid Post ID' );
+			}
 			$returnArray     = array();
-			$returnArray['status']  = false;
 			if ( ! is_user_logged_in() ){
+				$returnArray['status']  = false;
 				$returnArray['message'] = 'ERROR: please login to continue.';
 				echo json_encode( $returnArray );
 				die( 0 );
 			}
-			if ( ! isset( $_POST['comment_id'] ) || intval( $_POST['comment_id'] ) <= 0 ) {
-				$returnArray['message'] = 'ERROR: Invalid comment ID.';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-			if ( ! ( isset( $_POST['followup_post_id'] ) && get_post_type( intval( $_POST['followup_post_id'] ) ) == $_POST['post_type'] ) ) {
-				$returnArray['message'] = 'ERROR: Invalid Post ID.';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-			if ( '' == $_POST['followup_content'] ) {
-				$returnArray['message'] = 'ERROR: please type a comment.';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-
+			$followuptype    = $_POST['followuptype'];
 			$comment_post_ID = $_POST['followup_post_id'];
 			$post_type       = get_post_type( $comment_post_ID );
 			$comment_content = rthd_content_filter( $_POST['followup_content'] );
 			$comment_privacy = $_POST['followup_private'];
-
+			global $wpdb;
 			$user = wp_get_current_user();
 			if ( $user->exists() ) {
 				$user_id              = $user->ID;
 				$comment_author       = esc_sql( $user->display_name );
 				$comment_author_email = esc_sql( $user->user_email );
+				$comment_author_url   = esc_sql( $user->user_url );
 			}
+			if ( '' == $comment_content ) {
+				$returnArray['status']  = false;
+				$returnArray['message'] = 'ERROR: please type a comment.';
+				echo json_encode( $returnArray );
+				die( 0 );
+			}
 
+			if ( isset( $_POST['comment_id'] ) && intval( $_POST['comment_id'] ) > 0 ) {
-			$commentdata = get_comment( $_POST['comment_id'], ARRAY_A );
-			$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
-			$user_edit = current_user_can( $cap ) || (get_current_user_id() == $commentdata['user_id'] );
-			if ( !$user_edit ) {
+				$commentdata = get_comment( $_POST['comment_id'], ARRAY_A );
+				$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
+				$user_edit = current_user_can( $cap ) || (get_current_user_id() == $commentdata['user_id'] );
+				if ( !$user_edit ) {
-				$returnArray['message'] = 'ERROR: Unauthorized Access';
+					$returnArray['status']  = false;
+					$returnArray['message'] = 'Unauthorized Access';
-				echo json_encode( $returnArray );
-				die( 0 );
-			}
-			$oldCommentBody = $commentdata['comment_content'];
+					echo json_encode( $returnArray );
+					die( 0 );
+				}
+				$oldCommentBody = $commentdata['comment_content'];
-			$commentdata['comment_content'] = $comment_content;
 
+				$commentdata['comment_content'] = $comment_content;
-			$oldDate                        = $commentdata['comment_date'];
-			$newDate                        = '';
-			if ( isset( $_REQUEST['follwoup-time'] ) && $_REQUEST['follwoup-time'] != '' ) {
-				$d                           = new DateTime( $_REQUEST['follwoup-time'] );
-				$UTC                         = new DateTimeZone( 'UTC' );
-				$commentdata['comment_date'] = $d->format( 'Y-m-d H:i:s' );
-				$newDate                     = $commentdata['comment_date'];
-				$d->setTimezone( $UTC );
-				$commentdata['comment_date_gmt'] = $d->format( 'Y-m-d H:i:s' );
-			}
-			else {
-				$newDate = current_time( 'mysql', 1 );
-			}
+				$oldDate                        = $commentdata['comment_date'];
+				$newDate                        = '';
+				if ( isset( $_REQUEST['follwoup-time'] ) && $_REQUEST['follwoup-time'] != '' ) {
+					$d                           = new DateTime( $_REQUEST['follwoup-time'] );
+					$UTC                         = new DateTimeZone( 'UTC' );
+					$commentdata['comment_date'] = $d->format( 'Y-m-d H:i:s' );
+					$newDate                     = $commentdata['comment_date'];
+					$d->setTimezone( $UTC );
+					$commentdata['comment_date_gmt'] = $d->format( 'Y-m-d H:i:s' );
+				}
+				else {
+					$newDate = current_time( 'mysql', 1 );
+				}
-
-			$old_privacy=  $commentdata['comment_type'];
-			$commentdata['comment_type']= $comment_privacy;
+                $old_privacy=  $commentdata['comment_type'];
+                $commentdata['comment_type']= $comment_privacy;
+                // update_comment_meta( $_POST['comment_id'], '_rthd_privacy', $comment_privacy );
 
-			wp_update_comment( $commentdata ); //update comment
+				wp_update_comment( $commentdata );
+
-			//todo: remove below line when comment wordpress start supporting comment_type edit
-			rthd_edit_comment_type( $commentdata['comment_ID'], $comment_privacy );
+				//todo: remove below line when comment wordpress start supporting comment_type edit
+				rthd_edit_comment_type( $commentdata['comment_ID'], $comment_privacy );
-
-			$uploaded = array();
-			$attachment = array();
-			$comment = get_comment( $_POST['comment_id'] );
-			if ( isset( $_REQUEST['attachemntlist'] ) && ! empty( $_REQUEST['attachemntlist'] ) ) {
-				delete_comment_meta( $_POST['comment_id'], 'attachment' );
-				foreach ( $_REQUEST['attachemntlist'] as $strAttach ) {
-					$attachfile = get_attached_file( intval( $strAttach ) );
-					if ( $attachfile ) {
-						$attachment[] = $attachfile;
-						$extn_array   = explode( '.', $attachfile );
-						$extn         = $extn_array[ count( $extn_array ) - 1 ];
-						$file_array   = explode( '/', $attachfile );
-						$fileName     = $file_array[ count( $file_array ) - 1 ];
-						$uploaded[]   = array(
-							'filename'      => $fileName,
-							'extn'          => $extn,
-							'url'           => wp_get_attachment_url( intval( $strAttach ) ),
-							'file'          => $attachfile,
-						);
-					}
-				}
-				$this->add_attachment_to_post( $uploaded, $comment_post_ID, $_POST['comment_id'] );
-			}
+				$uploaded = array();
+				$attachment = array();
+				$comment = get_comment( $_POST['comment_id'] );
+				if ( isset( $_REQUEST['attachemntlist'] ) && ! empty( $_REQUEST['attachemntlist'] ) ) {
+					delete_comment_meta( $_POST['comment_id'], 'attachment' );
+					foreach ( $_REQUEST['attachemntlist'] as $strAttach ) {
+						$attachfile = get_attached_file( intval( $strAttach ) );
+						if ( $attachfile ) {
+							$attachment[] = $attachfile;
+							$extn_array   = explode( '.', $attachfile );
+							$extn         = $extn_array[ count( $extn_array ) - 1 ];
+							$file_array   = explode( '/', $attachfile );
+							$fileName     = $file_array[ count( $file_array ) - 1 ];
+							$uploaded[]   = array(
+								'filename'      => $fileName,
+								'extn'          => $extn,
+								'url'           => wp_get_attachment_url( intval( $strAttach ) ),
+								'file'          => $attachfile,
+							);
+						}
+					}
+					$this->add_attachment_to_post( $uploaded, $comment_post_ID, $_POST['comment_id'] );
+				}
-
-			$rt_hd_email_notification->notification_followup_updated( $comment, get_current_user_id(),$old_privacy, $comment_privacy, $oldCommentBody, $commentdata[ 'comment_content' ] );
+				$rt_hd_email_notification->notification_followup_updated( $comment, get_current_user_id(),$old_privacy, $comment_privacy, $oldCommentBody, $commentdata[ 'comment_content' ] );
-
-			$returnArray['status']        = true;
+				$returnArray['status']        = true;
+				//				$returnArray['comment_count'] = get_comments(
+				//					array(
+				//						'order'     => 'DESC',
+				//						'post_id'   => $comment_post_ID,
+				//						'post_type' => $post_type,
+				//						'count'     => true,
+				//					) );
-			$returnArray['private']       = $comment->comment_type;
+				$returnArray['private']       = $comment->comment_type;
+				//				$returnArray['comment_content'] = wpautop( make_clickable( $comment->comment_content ) );
-			$comment_render_type = 'left';
-			$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
-			if ( ! empty( $comment_user ) ) {
-				if ( $comment_user->has_cap( $cap ) ) {
-					$comment_render_type = 'right';
-				}
-			}
-			clean_comment_cache( $comment->comment_ID  );
-			$user_edit = current_user_can( $cap ) || ( get_current_user_id() == $comment->user_id );
-			$returnArray['comment_content'] = rthd_render_comment( get_comment( $comment->comment_ID ), $user_edit, $comment_render_type, false );
-			echo json_encode( $returnArray );
+				$comment_render_type = 'left';
+				$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
+				if ( ! empty( $comment_user ) ) {
+					if ( $comment_user->has_cap( $cap ) ) {
+						$comment_render_type = 'right';
+					}
+				}
+				clean_comment_cache( $comment->comment_ID  );
+				$user_edit = current_user_can( $cap ) || ( get_current_user_id() == $comment->user_id );
+				$returnArray['comment_content'] = rthd_render_comment( get_comment( $comment->comment_ID ), $user_edit, $comment_render_type, false );
+				echo json_encode( $returnArray );
+				die( 0 );
+			}
+
+			$comment_type                   = $followuptype;
+			$comment_parent                 = 0; //absint($_POST['comment_ID']);
+			$comment_auto_approved          = true;
+			$commentdata                    = compact( 'comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_id' );
+			$commentdata                    = apply_filters( 'preprocess_comment', $commentdata );
+			$commentdata['comment_post_ID'] = (int) $commentdata['comment_post_ID'];
+			if ( isset( $commentdata['user_ID'] ) ) {
+				$commentdata['user_id'] = $commentdata['user_ID'] = (int) $commentdata['user_ID'];
+			} elseif ( isset( $commentdata['user_id'] ) ) {
+				$commentdata['user_id'] = (int) $commentdata['user_id'];
+			}
+			$commentdata['comment_parent']    = isset( $commentdata['comment_parent'] ) ? absint( $commentdata['comment_parent'] ) : 0;
+			$parent_status                    = ( 0 < $commentdata['comment_parent'] ) ? wp_get_comment_status( $commentdata['comment_parent'] ) : '';
+			$commentdata['comment_parent']    = ( 'approved' == $parent_status || 'unapproved' == $parent_status ) ? $commentdata['comment_parent'] : 0;
+			$commentdata['comment_author_IP'] = preg_replace( '/[^0-9a-fA-F:., ]/', '', $_SERVER['REMOTE_ADDR'] );
+			$commentdata['comment_agent']     = substr( $_SERVER['HTTP_USER_AGENT'], 0, 254 );
+			if ( isset( $_REQUEST['follwoup-time'] ) && $_REQUEST['follwoup-time'] != '' ) {
+				$d                           = new DateTime( $_REQUEST['follwoup-time'] );
+				$UTC                         = new DateTimeZone( 'UTC' );
+				$commentdata['comment_date'] = $d->format( 'Y-m-d H:i:s' );
+				$d->setTimezone( $UTC );
+				$commentdata['comment_date_gmt'] = $d->format( 'Y-m-d H:i:s' );
+			} else {
+				$commentdata['comment_date']     = current_time( 'mysql' );
+				$commentdata['comment_date_gmt'] = current_time( 'mysql', 1 );
+			}
+			$commentdata['comment_approved'] = 1;
+            $commentdata['comment_type']= $comment_privacy;
+            $comment_ID                      = wp_insert_comment( $commentdata );
+
+			//			update_comment_meta( $comment_ID, '_rthd_privacy', $comment_privacy );
+
+			$comment = get_comment( $comment_ID );
+
+			$attachment = array();
+			$uploaded   = array();
+			if ( isset( $_REQUEST['attachemntlist'] ) && ! empty( $_REQUEST['attachemntlist'] ) ) {
+				foreach ( $_REQUEST['attachemntlist'] as $strAttach ) {
+					$attachfile = get_attached_file( intval( $strAttach ) );
+					if ( $attachfile ) {
+						$attachment[] = $attachfile;
+						$extn_array = explode( '.', $attachfile );
+						$extn       = $extn_array[ count( $extn_array ) - 1 ];
+						$file_array = explode( '/', $attachfile );
+						$fileName   = $file_array[ count( $file_array ) - 1 ];
+						$uploaded[] = array(
+							'filename'      => $fileName,
+							'extn'          => $extn,
+							'url'           => wp_get_attachment_url( intval( $strAttach ) ),
+							'file'          => $attachfile,
+						);
+					}
+				}
+				$this->add_attachment_to_post( $uploaded, $comment_post_ID, $comment_ID );
+			}
+			$to  = '';
+			$bcc = '';
+			$cc  = '';
+
+			if ( 'mail' == $followuptype ) {
+
+				$subject = $this->create_title_for_mail( $comment_post_ID );
+
+				$mailbody = str_replace( '&nbsp;', ' ', $comment->comment_content );
+
+				//commentSendAttachment
+
+				$toEmail = array();
+				if ( isset( $_POST['comment-reply-to'] ) ) {
+					$sep = '';
+					foreach ( $_POST['comment-reply-to'] as $email ) {
+						$toEmail[] = array( 'email' => $email, 'name' => '' );
+						$to .= $sep . $email;
+						$sep = ',';
+					}
+				}
+				$ccEmail = array();
+				if ( isset( $_POST['comment-reply-cc'] ) ) {
+					$sep = '';
+					foreach ( $_POST['comment-reply-cc'] as $email ) {
+						$ccEmail[] = array( 'email' => $email, 'name' => '' );
+						$cc .= $sep . $email;
+						$sep = ',';
+					}
+				}
+				$bccEmail = array();
+				if ( isset( $_POST['comment-reply-bcc'] ) ) {
+					$sep = '';
+					foreach ( $_POST['comment-reply-bcc'] as $email ) {
+						$bccEmail[] = array( 'email' => $email, 'name' => '' );
+						$bcc .= $sep . $email;
+						$sep = ',';
+					}
+				}
+
+				if ( isset( $_POST['comment-reply-from'] ) ) {
+					$fromemail = $_POST['comment-reply-from'];
+					//to set default email
+				}
+				if ( empty( $toEmail ) && empty( $ccEmail ) && empty( $bccEmail ) ) {
+					return true;
+				}
+
+				if ( ! isset( $_REQUEST['commentSendAttachment'] ) ) {
+					$_REQUEST['commentSendAttachment'] = array();
+				}
+
+				if ( ! $this->is_allow_to_sendemail_fromemail( $fromemail ) ) {
+					return false;
+				}
+				$signature   = '';
+				$email_type  = '';
+				$imap_server = '';
+				if ( ! $this->check_setting_for_new_followup_email( ) ) {
+					return false;
+				}
+
+				if ( false == strpos( $signature, '</' ) ) {
+					$signature = htmlentities( $signature );
+					$signature = preg_replace( '/(\n|\r|\r\n)/i', '<br />\n', $signature );
+					$signature = preg_replace( '/  /i', '  ', $signature );
+				}
+				$mailbody .= '<br />' . $signature;
+				$rt_hd_email_notification->insert_new_send_email( $subject, '', rthd_get_general_body_template( $mailbody ), $toEmail, $ccEmail, $bccEmail, $attachment, $comment_ID, 'comment' );
+			}
+
+			update_comment_meta( $comment_ID, '_email_from', $_POST['comment-reply-from'] );
+			update_comment_meta( $comment_ID, '_email_to', $to );
+			update_comment_meta( $comment_ID, '_email_cc', $cc );
+			update_comment_meta( $comment_ID, '_email_bcc', $bcc );
+
+			$rt_hd_email_notification->notification_new_followup_added( $comment, $comment_privacy, $uploaded );
+
+			$returnArray['status'] = true;
+			$returnArray['comment_id'] = $comment_ID;
+			$returnArray['comment_count'] = get_comments( array(
+															'order'     => 'DESC',
+															'post_id'   => $comment_post_ID,
+															'post_type' => $post_type,
+															'count'     => true,
+															) );
+			$returnArray['private']       = $comment_privacy;
+
+			echo json_encode( $returnArray );
+
+			ob_end_flush();
 			die( 0 );
 		}
 
@@ -1775,44 +1938,44 @@
 			echo json_encode($response);
 			die();
 		}
-
+		
 		/**
 		 * User can watch/unwatch ticket.
 		 */
 		function front_end_ticket_watch_unwatch() {
 			global $rt_hd_email_notification;
-
+			
 			$cap = rt_biz_get_access_role_cap( RT_HD_TEXT_DOMAIN, 'author' );
 			$current_user_id = get_current_user_id();
 			$current_user = get_user_by( 'id', $current_user_id );
-
+			
 			$response = $subscriber_info = array();
 			$response['status']= false;
-
+			
 			$post_id = $_POST['post_id'];
 			$post_type = get_post_type( $post_id );
 			$watch_unwatch = $_POST['watch_unwatch'];
-
+			
 			$subscriber_info[] = array( 'email' => $current_user->user_email, 'name' => $current_user->display_name );
-
+			
 			if( 'watch' == $watch_unwatch ) {
 				if ( current_user_can( $cap ) ) {
 					// Add user to ticket subcriber list.
 					$ticket_subscribers = get_post_meta( $post_id, '_rtbiz_hd_subscribe_to', true );
-
+					
 					$ticket_subscribers[] = $current_user_id;
-
+					
 					update_post_meta( $post_id, '_rtbiz_hd_subscribe_to', $ticket_subscribers );
-
+					
 					$rt_hd_email_notification->notification_ticket_subscribed($post_id, $post_type, $subscriber_info );
 				}
 				else {
 					// Add user to tiket contact list.
 					$user_contact_info = rt_biz_get_contact_by_email( $current_user->user_email );
-
+					
 					rt_biz_connect_post_to_contact( $post_type, $post_id, $user_contact_info );
 				}
-
+				
 				$response['status']= true;
 				$response['label']= 'Unwatch';
 				$response['value']= 'unwatch';
@@ -1822,28 +1985,28 @@
 					// Remove user from ticket subcriber list.
 					$ticket_subscribers = get_post_meta( $post_id, '_rtbiz_hd_subscribe_to', true );
 					$new_ticket_subscribers = array();
-
+					
 					foreach ( $ticket_subscribers as $ticket_subscriber ) {
 						if( $ticket_subscriber != $current_user_id ) {
 							$new_ticket_subscribers[] = $ticket_subscriber;
 						}
 					}
 					update_post_meta( $post_id, '_rtbiz_hd_subscribe_to', $new_ticket_subscribers );
-
+					
 					$rt_hd_email_notification->notification_ticket_unsubscribed( $post_id, $post_type, $subscriber_info );
 				}
 				else {
 					// Remove user from ticket contact list.
 					$user_contact_info = rt_biz_get_contact_by_email( $current_user->user_email );
-
+					
 					rt_biz_clear_post_connection_to_contact( $post_type, $post_id, $user_contact_info );
 				}
-
+				
 				$response['status']= true;
 				$response['label']= 'Watch';
 				$response['value']= 'watch';
 			}
-
+			
 			echo json_encode($response);
 			die();
 		}
Index: app/assets/javascripts/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/assets/javascripts/app.js	(revision )
+++ app/assets/javascripts/app.js	(revision )
@@ -195,7 +195,7 @@
 
 		requestArray['post_type'] = rthd_post_type;
 		requestArray["comment_id"] = commentid ;
-		requestArray["action"] = "rthd_update_followup_ajax";
+		requestArray["action"] = "rthd_add_new_followup_ajax";
 		requestArray['followuptype']="comment";
 		requestArray['followup_ticket_unique_id']=jQuery('#ticket_unique_id' ).val();
 		//requestArray['followup_private']='no';
@@ -379,7 +379,7 @@
 			             }
 		             });
 	});
-
+	
 	jQuery( '#rthd-assignee-list' ).change(function (e){
 		var requestArray = new Object();
 		requestArray['post_id'] =  jQuery('#post-id' ).val();
Index: app/assets/javascripts/admin_new.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/assets/javascripts/admin_new.js	(revision )
+++ app/assets/javascripts/admin_new.js	(revision )
@@ -314,7 +314,7 @@
 			    jQuery(this).attr('disabled','disabled');
 			    requestArray['post_type'] = rthd_post_type;
 			    requestArray["comment_id"] = commentid ;
-			    requestArray["action"] = "rthd_update_followup_ajax";
+			    requestArray["action"] = "rthd_add_new_followup_ajax";
 			    requestArray['followuptype']="comment";
 			    requestArray['followup_ticket_unique_id']=jQuery('#ticket_unique_id' ).val();
 			    //requestArray['followup_private']='no';
@@ -612,4 +612,4 @@
         }
     }
     rthdAdmin.init();
-});
+});
\ No newline at end of file
